(()=>{"use strict";class e extends Map{computeIfAbsent(e,t){if(this.has(e))return this.get(e);const r=t(e);return this.set(e,r),r}computeIfPresent(e,t){const r=this.get(e);if(void 0===r)return;const n=t(e,r);return void 0!==n?this.set(e,n):this.delete(e),n}compute(e,t){const r=t(e,this.get(e));return r?this.set(e,r):this.delete(e),r}}var t,r,n,o;!function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Info=2]="Info",e[e.Warn=3]="Warn",e[e.Error=4]="Error"}(t||(t={}));class i{constructor(e,t,r){this._name=e,this._level=t,this._fnOutput=r}trace(e){this.log(t.Trace,e)}debug(e){this.log(t.Debug,e)}error(e,r){this.log(t.Error,e,r)}info(e){this.log(t.Info,e)}warn(e,r){this.log(t.Warn,e,r)}setLevel(e){this._level=e}setOutput(e){this._fnOutput=e}log(e,r,n){this._level>e||this._fnOutput(`${t[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${r()}${n?"\n"+n.stack:""}`)}}class s{constructor(){this._loggers=new e,this._logLevel=t.Error,this._fnOutput=s.logConsole}getLogger(e){return this._loggers.computeIfAbsent(e,(e=>new i(e,this._logLevel,this._fnOutput)))}changeLogLevel(e){this._logLevel=e,this._loggers.forEach((t=>t.setLevel(e)))}changeOutput(e){this._fnOutput=e,this._loggers.forEach((e=>e.setOutput(this._fnOutput)))}reset(){this.changeLogLevel(t.Error),this._fnOutput=s.logConsole,this._loggers.forEach((e=>e.setOutput(this._fnOutput)))}static logConsole(e){console&&console.log&&console.log(e)}}new s,function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Info=2]="Info",e[e.Warn=3]="Warn",e[e.Error=4]="Error",e[e.Fatal=5]="Fatal",e[e.Off=6]="Off"}(r||(r={})),function(e){e.toLogLevel=function(t){switch(t.toLowerCase()){case"trace":return e.Trace;case"debug":return e.Debug;case"info":return e.Info;case"warn":return e.Warn;case"error":return e.Error;case"fatal":return e.Fatal;case"off":return e.Off;default:return}}}(r||(r={}));class a{constructor(){this.type="LogChannel"}write(e){console&&console.log&&console.log(e.message+(e.error?`\n${e.error}`:""))}}!function(e){e.createConsoleChannel=function(){return new a}}(n||(n={}));class l extends Map{computeIfAbsent(e,t){if(this.has(e))return this.get(e);const r=t(e);return this.set(e,r),r}computeIfPresent(e,t){const r=this.get(e);if(void 0===r)return;const n=t(e,r);return void 0!==n?this.set(e,n):this.delete(e),n}compute(e,t){const r=t(e,this.get(e));return r?this.set(e,r):this.delete(e),r}}function g(e){return d.getLogger(e)}!function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Info=2]="Info",e[e.Warn=3]="Warn",e[e.Error=4]="Error"}(o||(o={}));const u={setInternalLogLevel:e=>d.changeLogLevel(e),setOutput:e=>d.changeOutput(e),reset:()=>d.reset()};class c{constructor(e,t,r){this._name=e,this._level=t,this._fnOutput=r}trace(e){this.log(o.Trace,e)}debug(e){this.log(o.Debug,e)}error(e,t){this.log(o.Error,e,t)}info(e){this.log(o.Info,e)}warn(e,t){this.log(o.Warn,e,t)}setLevel(e){this._level=e}setOutput(e){this._fnOutput=e}log(e,t,r){this._level>e||this._fnOutput(`${o[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${t()}${r?"\n"+r.stack:""}`)}}class h{constructor(){this._loggers=new l,this._logLevel=o.Error,this._fnOutput=h.logConsole}getLogger(e){return this._loggers.computeIfAbsent(e,(e=>new c(e,this._logLevel,this._fnOutput)))}changeLogLevel(e){this._logLevel=e,this._loggers.forEach((t=>t.setLevel(e)))}changeOutput(e){this._fnOutput=e,this._loggers.forEach((e=>e.setOutput(this._fnOutput)))}reset(){this.changeLogLevel(o.Error),this._fnOutput=h.logConsole,this._loggers.forEach((e=>e.setOutput(this._fnOutput)))}static logConsole(e){console&&console.log&&console.log(e)}}const d=new h;var f,p,v=Object.freeze({__proto__:null,INTERNAL_LOGGING_SETTINGS:u,get InternalLogLevel(){return o},getInternalLogger:g});!function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Info=2]="Info",e[e.Warn=3]="Warn",e[e.Error=4]="Error",e[e.Fatal=5]="Fatal",e[e.Off=6]="Off"}(f||(f={})),function(e){e.toLogLevel=function(t){switch(t.toLowerCase()){case"trace":return e.Trace;case"debug":return e.Debug;case"info":return e.Info;case"warn":return e.Warn;case"error":return e.Error;case"fatal":return e.Fatal;case"off":return e.Off;default:return}}}(f||(f={}));class m{constructor(e){this._runtime=e}get id(){return this._runtime.id}get logLevel(){return this._runtime.level}get runtimeSettings(){return Object.assign({},this._runtime)}set runtimeSettings(e){this._runtime=e}trace(e,...t){this.logMessage(f.Trace,e,t)}debug(e,...t){this.logMessage(f.Debug,e,t)}info(e,...t){this.logMessage(f.Info,e,t)}warn(e,...t){this.logMessage(f.Warn,e,t)}error(e,...t){this.logMessage(f.Error,e,t)}fatal(e,...t){this.logMessage(f.Fatal,e,t)}logMessage(e,t,r){if(this._runtime.level>e)return;const n=Date.now(),o="string"==typeof t?t:t(),i=m.getErrorAndArgs(r);switch(this._runtime.channel.type){case"RawLogChannel":return void this._runtime.channel.write({message:o,exception:i.error,args:i.args,timeInMillis:n,level:e,logNames:this._runtime.name},this._runtime.argumentFormatter);case"LogChannel":this._runtime.channel.write(this.createLogMessage(o,e,i,n))}}formatArgValue(e){try{return this._runtime.argumentFormatter(e)}catch(t){return`>>ARG CONVERT FAILED: '${void 0!==e?e.toString():"undefined"}'<<`}}createLogMessage(e,t,r,n){let o;const i=r.error,s=r.args;i&&(o=`${i.name}: ${i.message}`,i.stack&&(o+=`@\n${i.stack}`));const a=this._runtime.dateFormatter(n);let l=f[t].toUpperCase();return l.length<5&&(l+=" "),{message:a+" "+l+" ["+("string"==typeof this._runtime.name?this._runtime.name:this._runtime.name.join(", "))+"] "+e+(void 0!==s&&s.length>0?" ["+s.map((e=>this.formatArgValue(e))).join(", ")+"]":""),error:o}}static getErrorAndArgs(e){if(0===e.length)return{};let t,r;const n=e[0];if(n instanceof Error)return t=n,r=e.length>1?e.slice(1):void 0,{error:t,args:r};if("function"==typeof n){const o=n();return o instanceof Error?(t=o,r=e.length>1?e.slice(1):void 0,{error:t,args:r}):1===e.length?Array.isArray(o)?{args:o.length>0?o:void 0}:{args:o}:Array.isArray(o)?{args:[...o,...e.slice(1)]}:{args:[o,...e.slice(1)]}}return{args:e}}}function _(e,t,r=" "){return L(e,t,"start",r)}function L(e,t,r,n=" "){if(t<=e.length)return e;if(n.length>1)throw new Error(`Fill char must be one char exactly, it is: ${n.length}`);const o=t-e.length;let i="";for(let e=0;e<o;e++)i+=n;return"start"===r?i+e:e+i}function S(e){return void 0===e?"undefined":JSON.stringify(e)}function w(e){const t=new Date(e);return`${t.getFullYear()}-${_((t.getMonth()+1).toString(),2,"0")}-${_(t.getDate().toString(),2,"0")} ${_(t.getHours().toString(),2,"0")}:${_(t.getMinutes().toString(),2,"0")}:${_(t.getSeconds().toString(),2,"0")},${_(t.getMilliseconds().toString(),3,"0")}`}class C{constructor(){this.type="LogChannel"}write(e){console&&console.log&&console.log(e.message+(e.error?`\n${e.error}`:""))}}!function(e){e.createConsoleChannel=function(){return new C}}(p||(p={}));class b{constructor(e,t){this._log=g("core.impl.LogProviderImpl"),this._name=e,this._settings=t,this._loggers=new l,this._idToKeyMap=new l,this._globalRuntimeSettings={level:t.level,channel:t.channel},this._nextLoggerId=1,this._log.trace((()=>`Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`))}get runtimeSettings(){return Object.assign(Object.assign({},this._settings),{level:this._globalRuntimeSettings.level,channel:this._globalRuntimeSettings.channel})}getLogger(e){return this.getOrCreateLogger(e)}updateLoggerRuntime(e,t){this._log.debug((()=>`Updating logger ${e.id} runtime settings using: '${JSON.stringify(t)}'`));const r=this._idToKeyMap.get(e.id);return void 0===r?(this._log.warn((()=>`Cannot update logger with id: ${e.id}, it was not found.`)),!1):(this._loggers.computeIfPresent(r,((e,r)=>(r.runtimeSettings=b.mergeRuntimeSettingsIntoLogRuntime(r.runtimeSettings,t),r))),!0)}updateRuntimeSettings(e){this._log.debug((()=>`Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(e)}'`)),this._globalRuntimeSettings={level:void 0!==e.level?e.level:this._globalRuntimeSettings.level,channel:void 0!==e.channel?e.channel:this._globalRuntimeSettings.channel},this._loggers.forEach((t=>t.runtimeSettings=b.mergeRuntimeSettingsIntoLogRuntime(t.runtimeSettings,e)))}clear(){this._loggers.clear(),this._idToKeyMap.clear(),this._globalRuntimeSettings=Object.assign({},this._settings),this._nextLoggerId=1}getOrCreateLogger(e){const t=b.createKey(e),r=this._loggers.computeIfAbsent(t,(()=>{const t={level:this._globalRuntimeSettings.level,channel:this._globalRuntimeSettings.channel,id:this.nextLoggerId(),name:e,argumentFormatter:this._settings.argumentFormatter,dateFormatter:this._settings.dateFormatter};return new m(t)}));return this._idToKeyMap.computeIfAbsent(r.id,(()=>t)),r}nextLoggerId(){const e=this._name+"_"+this._nextLoggerId;return this._nextLoggerId++,e}static mergeRuntimeSettingsIntoLogRuntime(e,t){return Object.assign(Object.assign({},e),{level:void 0!==t.level?t.level:e.level,channel:void 0!==t.channel?t.channel:e.channel})}static createKey(e){return"string"==typeof e?e:e.join(",")}}function y(e,t){return new b(e,t)}var $=Object.freeze({__proto__:null,EnhancedMap:l,maxLengthStringValueInArray:function(e){return e.map((e=>e.length)).reduce(((e,t)=>t>e?t:e),0)},padEnd:function(e,t,r=" "){return L(e,t,"end",r)},padStart:_});function O(e){return`Log4TSGroupConfig=level: ${f[e.level].toString()}, expression: ${e.expression.toString()}, (omitted functions/channel)`}class E{constructor(e,t,r){this._log=v.getInternalLogger("log4ts.impl.Log4TSProviderImpl"),this._name=e,this._defaultConfig=[Object.assign(Object.assign({},t),{identifier:t.identifier}),y("log4ts_"+e+"_"+t.identifier,t)],this._logProviders=new Map(r.map((t=>{const r=Object.assign({},t),n=y("log4ts_"+e+"_"+t.identifier,t);return[t.identifier,{groupConfig:r,provider:n}]}))),this._log.trace((()=>{const e=[...this._logProviders.values()].map((e=>O(e.groupConfig))).join(", ");return`Creating Log4TSProviderImpl '${this._name}', defaultConfig: ${O(this._defaultConfig[0])}, groupConfigs: ${e}`}))}get name(){return this._name}get config(){return Object.assign({},this._defaultConfig[0])}get groupConfigs(){return[...this._logProviders.values()].map((e=>Object.assign({},e.groupConfig)))}getLogger(e){for(const t of this._logProviders.values())if(t.groupConfig.expression.test(e))return t.provider.getLogger(e);return this._defaultConfig[1].getLogger(e)}updateRuntimeSettingsGroup(e,t){const r=this._logProviders.get(e);if(void 0===r)throw new Error(`Cannot update group with identifier '${e}', it does not exist.`);this._log.debug((()=>`Will update ${O(r.groupConfig)}, associated LogProvider '${r.provider}' - applying runtime change: ${JSON.stringify(t)}.`)),E.updateLog4TGroupConfig(r.groupConfig,r.provider,t)}updateRuntimeSettings(e){this._log.debug((()=>`Will update settings for all groups and existing loggers - will apply runtime change: ${JSON.stringify(e)}.`)),this._logProviders.forEach((t=>{const r=t.groupConfig,n=t.provider;this._log.debug((()=>`Will update ${O(r)}, associated LogProvider '${n}' - applying runtime change: ${JSON.stringify(e)}.`)),E.updateLog4TGroupConfig(r,n,e)}))}static updateLog4TGroupConfig(e,t,r){r.level&&(e.level=r.level),r.channel&&(e.channel=r.channel),t.updateRuntimeSettings(r)}}class T{constructor(e,t){this._provider=e,this._messageChannel=t,this._originalLogLevels=T.loadCurrentGroupLogLevels(e)}get name(){return this._provider.name}showSettings(){let e=`Available group configs (Log4TSProvider '${this._provider.name}'):\n`;const t=this._provider.groupConfigs.map((e=>({level:f[e.level],channelDescription:e.channel.toString?e.channel.toString():JSON.stringify(e.channel),identifier:e.identifier}))),r=t.length.toString().length,n=$.maxLengthStringValueInArray(t.map((e=>e.identifier)));e+=t.map(((e,t)=>`  [${$.padStart(t.toString(),r)}, ${$.padEnd(e.identifier,n)} (level=${$.padEnd(e.level,5)})]`)).join("\n")+"\n",this._messageChannel(e)}update(e,t){const r=f.toLogLevel(e);if(void 0===r)throw new Error(`Cannot update log provider, log level '${e}' is invalid.`);const n={level:r};if(void 0===t)return this._provider.updateRuntimeSettings(n),void this._messageChannel("Updated all group configs successfully.");if("number"==typeof t){const e=this._provider.groupConfigs;if(t<0||t>=e.length)throw new Error(`Group config with index '${t}' does not exist (outside of range).`);const r=e[t];return this._provider.updateRuntimeSettingsGroup(r.identifier,n),void this._messageChannel(`Updated group config with index '${t}' successfully.`)}this._provider.updateRuntimeSettingsGroup(t,n),this._messageChannel(`Updated group config with id '${t}' successfully.`)}reset(){this._originalLogLevels.forEach(((e,t)=>{this._provider.updateRuntimeSettingsGroup(t,{level:e})})),this._messageChannel("Successfully reset log levels back to original state (from when this Log4TSControlProvider was created).")}save(){if(!localStorage)return void this._messageChannel("Cannot save state, localStorage is not available.");const e={name:this._provider.name,groups:this._provider.groupConfigs.map((e=>({identifier:e.identifier,level:f[e.level]})))};localStorage.setItem(this.createKey(),JSON.stringify(e)),this._messageChannel(`Successfully saved state for Log4TSControlProvider '${this._provider.name}'.`)}restore(e){const t=void 0===e||e;if(!localStorage)return void(t&&this._messageChannel(`Will not attempt to restore state for Log4TSControlProvider '${this._provider.name}', localStorage is not available.`));const r=this.createKey(),n=localStorage.getItem(r);if(null!==n)try{const e=JSON.parse(n);if(this._provider.name!==e.name)return void(t&&this._messageChannel(`Cannot restore state for Log4TSControlProvider '${this._provider.name}', data is not for provider - found name '${e.name}'.`));this.restoreGroups(e,t),this._originalLogLevels=T.loadCurrentGroupLogLevels(this._provider)}catch(e){localStorage.removeItem(r),this._messageChannel(`Cannot restore state for Log4TSControlProvider '${this._provider.name}', data is not valid. Invalid data removed from localStorage.`)}else t&&this._messageChannel(`Cannot restore state for Log4TSControlProvider '${this._provider.name}', no data available.`)}help(){const e=`You can use the following commands (Log4TSProvider ${this._provider.name}):\n  showSettings()\n    Shows the current configuration settings.\n  update(logLevel: Log4TSControlProviderLogLevel, groupId?: number | string)\n    Change the log level for one or all config groups.\n      @param level   The log level to set - must be one of 'trace', 'debug', 'info', 'warn', 'error' or 'fatal'\n      @param groupId Optional group config to update by either index or identifier, when omitted updates all groups.\n                     Use showSettings() to find details about index and/or identifier.\n  reset()\n    Resets the log levels of the config groups back to when this control provider was created.\n  save()\n    Saves the current log levels for all config groups of this provider. Use restore() to load last saved state.\n  restore()\n    Restore stored saved state, if any. Log levels will be set according to saved state.\n  help()\n    Shows this help.\n`;this._messageChannel(e)}restoreGroups(e,t){e.groups.forEach((e=>{try{const r=f.toLogLevel(e.level);void 0!==r?(this._provider.updateRuntimeSettingsGroup(e.identifier,{level:r}),this._messageChannel(`Log4TSControlProvider '${this._provider.name}' - restored log level of group '${e.identifier}' to '${f[r]}'.`)):t&&this._messageChannel(`Log4TSControlProvider '${this._provider.name}' - failed to restore log level of group '${e.identifier}', invalid log level was specified.`)}catch(r){t&&this._messageChannel(`Log4TSControlProvider '${this._provider.name}' - failed to restore log level of group '${e.identifier}'.`)}}))}createKey(){return`Log4TSProvider-${this._provider.name}`}static loadCurrentGroupLogLevels(e){return new Map(e.groupConfigs.map((e=>[e.identifier,e.level])))}}class x{constructor(){this._log=v.getInternalLogger("log4ts.impl.Log4TSProviderService"),this._providers=new $.EnhancedMap}createLogProvider(e,t){const r=this._providers.compute(e,((r,n)=>{if(n)throw new Error(`Log4TSProvider with name '${e}' already exists, cannot create another.`);const o=function(e,t){const r={argumentFormatter:t.argumentFormatter?t.argumentFormatter:e.argumentFormatter,channel:t.channel?t.channel:e.channel,dateFormatter:t.dateFormatter?t.dateFormatter:e.dateFormatter,groups:[],level:void 0!==t.level?t.level:e.level};return r.groups=t.groups.map((e=>function(e,t){return{argumentFormatter:t.argumentFormatter?t.argumentFormatter:e.argumentFormatter,channel:e.channel,dateFormatter:t.dateFormatter?t.dateFormatter:e.dateFormatter,expression:t.expression,level:void 0!==t.level?t.level:e.level,identifier:t.identifier?t.identifier:t.expression.toString()}}(r,e))),r}({argumentFormatter:S,channel:p.createConsoleChannel(),dateFormatter:w,groups:[],level:f.Error},t);!function(e){if(0===e.groups.length)throw new Error("Invalid configuration, 'groups' on configuration is empty, at least 1 group config must be specified.")}(o),this._log.debug((()=>`Creating new Log4TSProvider with name '${e}', using main config settings '${function(e){const t=e.groups.map((e=>O(e))).join(", ");return`Log4TSGroupConfig=level: ${f[e.level].toString()}, groups: ${t}, (omitted functions/channel)`}(o)}'.`));const i=new RegExp(".+"),s={channel:o.channel,level:o.level,expression:i,dateFormatter:o.dateFormatter,argumentFormatter:o.argumentFormatter,identifier:i.toString()};return new E(r,s,o.groups)}));return r}clear(){this._providers.clear()}getLog4TSControl(e){const t=e||(e=>{if(!console||!console.log)throw new Error("Cannot use console (it is not present), please specify a custom function to write to.");console.log(e)});return{help:()=>t(x.help()),showSettings:()=>t(this.showSettings()),getProvider:e=>this.getLog4TSControlProviderByIdOrName(e,t)}}showSettings(){let e="Available Log4TSProviders:\n";const t=this._providers.size.toString().length,r=$.maxLengthStringValueInArray([...this._providers.keys()]),n=[...this._providers.entries()].map(((e,n)=>{const o=e[0];return`  [${$.padStart(n.toString(),t)}, ${$.padEnd(o,r)}]`}));return e+=n.join("\n")+(n.length>0?"\n":""),e}getLog4TSControlProviderByIdOrName(e,t){if("string"==typeof e){const r=this._providers.get(e);if(void 0===r)throw new Error(`Provider with name '${e}' does not exist.`);return new T(r,t)}const r=[...this._providers.values()];if(e<0||e>=r.length)throw new Error(`Provider with index '${e}' does not exist (outside of range).`);return new T(r[e],t)}static help(){return"You can use the following commands:\n  showSettings()\n    Shows the current configuration settings.\n  getProvider: (id: number | string): Log4TSControlProvider\n    Get access to a Log4TSControlProvider to change log levels.\n      @param id The id (use showSettings to see) or name of the provider\n  help()\n    Shows this help.\n"}}const I=new x;var P;!function(e){e.createProvider=function(e,t){return I.createLogProvider(e,t)},e.clear=function(){I.clear()}}(P||(P={}));const R=P.createProvider("AwesomeLog4TSProvider",{level:r.Debug,groups:[{expression:new RegExp(".+")}]}).getLogger("content-script-openai.ts");var F=null;const A=["fixed top-8 right-4 my-2 flex max-h-[90vh] flex-col-reverse space-y-2 space-y-reverse overflow-y-auto px-2 py-4","fixed right-4 top-8 my-2 flex max-h-[90vh] flex-col-reverse space-y-2 space-y-reverse overflow-y-auto px-2 py-4","pointer-events-auto fixed end-4 top-8 z-100 my-2 flex max-h-[90vh] flex-col-reverse space-y-2 space-y-reverse overflow-y-auto px-2 py-4","flex justify-start"],N=["text-token-text-primary","streaming-animation"];new MutationObserver(((e,t)=>{for(const t of e)"childList"===t.type&&t.addedNodes.forEach((e=>{var t;if(e.className&&R.debug("Received new node: "+e.className),"string"==typeof e.className&&A.includes(e.className)){const e=document.querySelectorAll("div.markdown.prose"),t=document.querySelectorAll("span.text-token-text-secondary"),n=e[e.length-1].textContent;R.debug("ChatGPT inference done!");const o=""===t[0].textContent?"gpt-4":"gpt-"+t[0].textContent;R.debug("ChatGPT model selected! : "+o),R.debug("ChatGPT output finsihed! : "+n),R.debug("Window URL! : "+document.location.href);var r={url:document.location.href,body:'{"model":"'+o+'"}',generated_text:n,starttime:F,latency:Date.now()-F};window.postMessage({type:"NEW_CHATEVENTRAW",chateventraw:r},"*"),F=null}else"string"==typeof e.className&&(null===(t=e.className.split(" ").find((e=>N.includes(e))))||void 0===t?void 0:t.length)>0&&(R.debug("ChatGPT submit button clicked - inference starting!"),null==F&&(F=Date.now()))}))})).observe(document.body,{childList:!0,subtree:!0}),R.debug("content-script-openai.js: Content script loaded!")})();
//# sourceMappingURL=content-script-openai.js.map